<?php

namespace Fsb\Alfred\CoreBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * DriverRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DriverRepository extends EntityRepository implements UserProviderInterface
{
    public function loadUserByUsername($username)
    {
        $user = null;

        $qb = $this->_em->createQueryBuilder('');

        $qb->select('d')
            ->from('FsbAlfredCoreBundle:Driver', 'd')
            ->where($qb->expr()->orX(
                $qb->expr()->eq('d.username', ':username'),
                $qb->expr()->eq('d.email', ':username')
            ))
            ->setParameter('username', $username)
        ;

        try {
            $user = $qb->getQuery()->getSingleResult();
        }
        catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('Sorry, %s does not exists !', $username), 0, $e);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);

        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf('Instances of %s are not supported', $class));
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return ($this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName()));
    }
}
