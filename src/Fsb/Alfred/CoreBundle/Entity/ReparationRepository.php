<?php

namespace Fsb\Alfred\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * ReparationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReparationRepository extends EntityRepository
{
    public function findAll()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('r')
            ->from('FsbAlfredCoreBundle:Reparation', 'r')
            ->where($qb->expr()->eq('r.isHidden', ':isHidden'))
            ->setParameter('isHidden', false)
        ;

        return $qb->getQuery()->getResult();
    }

    public function findAllForDriver($driver)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('r')
            ->from('FsbAlfredCoreBundle:Reparation', 'r')
            ->where($qb->expr()->eq('r.isHidden', ':isHidden'))
            ->andWhere($qb->expr()->eq('r.driver', ':driver'))
            ->setParameter('isHidden', false)
            ->setParameter('driver', $driver)
        ;

        return $qb->getQuery()->getResult();
    }

    public function getTotalKilometersForDriver($driver)
    {
        $kilometers = 0;

        $qb = $this->_em->createQueryBuilder();

        $qb->select('SUM(r.kilometers) kilometers')
            ->from('FsbAlfredCoreBundle:Reparation', 'r')
            ->where($qb->expr()->eq('r.isHidden', ':isHidden'))
            ->andWhere($qb->expr()->eq('r.driver', ':driver'))
            ->setParameter('isHidden', false)
            ->setParameter('driver', $driver)
        ;

        try {
            $result = $qb->getQuery()->getSingleResult();
            $kilometers = (float) $result['kilometers'];
        }
        catch (NoResultException $e) {}

        return $kilometers;
    }

    public function getTotalPriceForDriver($driver)
    {
        $price = 0;

        $qb = $this->_em->createQueryBuilder();

        $qb->select('SUM(r.price) price')
            ->from('FsbAlfredCoreBundle:Reparation', 'r')
            ->where($qb->expr()->eq('r.isHidden', ':isHidden'))
            ->andWhere($qb->expr()->eq('r.driver', ':driver'))
            ->setParameter('isHidden', false)
            ->setParameter('driver', $driver)
        ;

        try {
            $result = $qb->getQuery()->getSingleResult();
            $price = (float) $result['price'];
        }
        catch (NoResultException $e) {}

        return $price;
    }
}
