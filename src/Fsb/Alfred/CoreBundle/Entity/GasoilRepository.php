<?php

namespace Fsb\Alfred\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * GasoilRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GasoilRepository extends EntityRepository
{
    public function findAll()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('g')
            ->from('FsbAlfredCoreBundle:Gasoil', 'g')
            ->where($qb->expr()->eq('g.isHidden', ':isHidden'))
            ->setParameter('isHidden', false)
        ;

        return $qb->getQuery()->getResult();
    }

    public function findAllForDriver($driver)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('g')
            ->from('FsbAlfredCoreBundle:Gasoil', 'g')
            ->where($qb->expr()->eq('g.isHidden', ':isHidden'))
            ->andWhere($qb->expr()->eq('g.driver', ':driver'))
            ->setParameter('isHidden', false)
            ->setParameter('driver', $driver)
        ;

        return $qb->getQuery()->getResult();
    }

    public function getTotalKilometersForDriver($driver)
    {
        $kilometers = 0;

        $qb = $this->_em->createQueryBuilder();

        $qb->select('SUM(g.kilometers) kilometers')
            ->from('FsbAlfredCoreBundle:Gasoil', 'g')
            ->where($qb->expr()->eq('g.isHidden', ':isHidden'))
            ->andWhere($qb->expr()->eq('g.driver', ':driver'))
            ->setParameter('isHidden', false)
            ->setParameter('driver', $driver)
        ;

        try {
            $result = $qb->getQuery()->getSingleResult();
            $kilometers = (float) $result['kilometers'];
        }
        catch (NoResultException $e) {}

        return $kilometers;
    }

    public function getTotalPriceForDriver($driver)
    {
        $price = 0;

        $qb = $this->_em->createQueryBuilder();

        $qb->select('SUM(g.price) price')
            ->from('FsbAlfredCoreBundle:Gasoil', 'g')
            ->where($qb->expr()->eq('g.isHidden', ':isHidden'))
            ->andWhere($qb->expr()->eq('g.driver', ':driver'))
            ->setParameter('isHidden', false)
            ->setParameter('driver', $driver)
        ;

        try {
            $result = $qb->getQuery()->getSingleResult();
            $price = (float) $result['price'];
        }
        catch (NoResultException $e) {}

        return $price;
    }

    public function getTotalCapacityForDriver($driver)
    {
        $capacity = 0;

        $qb = $this->_em->createQueryBuilder();

        $qb->select('SUM(g.capacity) capacity')
            ->from('FsbAlfredCoreBundle:Gasoil', 'g')
            ->where($qb->expr()->eq('g.isHidden', ':isHidden'))
            ->andWhere($qb->expr()->eq('g.driver', ':driver'))
            ->setParameter('isHidden', false)
            ->setParameter('driver', $driver)
        ;

        try {
            $result = $qb->getQuery()->getSingleResult();
            $capacity = (float) $result['capacity'];
        }
        catch (NoResultException $e) {}

        return $capacity;
    }

    public function getLastCapacityForDriver($driver)
    {
        $capacity = 0;

        $qb = $this->_em->createQueryBuilder();

        $qb->select('g')
            ->from('FsbAlfredCoreBundle:Gasoil', 'g')
            ->where($qb->expr()->eq('g.isHidden', ':isHidden'))
            ->andWhere($qb->expr()->eq('g.driver', ':driver'))
            ->setParameter('isHidden', false)
            ->setParameter('driver', $driver)
            ->orderBy('g.id', 'DESC')
            ->setMaxResults(1)
        ;

        try {
            $result = $qb->getQuery()->getSingleResult();
            $capacity = $result->getCapacity();
        }
        catch (NoResultException $e) {}

        return $capacity;
    }

    public function getTotalAmountForDriver($driver)
    {
        $amount = 0;

        $qb = $this->_em->createQueryBuilder();

        $qb->select('SUM(g.price * g.capacity) amount')
            ->from('FsbAlfredCoreBundle:Gasoil', 'g')
            ->where($qb->expr()->eq('g.isHidden', ':isHidden'))
            ->andWhere($qb->expr()->eq('g.driver', ':driver'))
            ->setParameter('isHidden', false)
            ->setParameter('driver', $driver)
        ;

        try {
            $result = $qb->getQuery()->getSingleResult();
            $amount = (float) $result['amount'];
        }
        catch (NoResultException $e) {}

        return $amount;
    }

    public function getKilometersDifferenceForDriver($driver)
    {
        $difference = 0;

        $qb = $this->_em->createQueryBuilder();

        $qb->select('(MAX(g.kilometers) - MIN(g.kilometers)) difference')
            ->from('FsbAlfredCoreBundle:Gasoil', 'g')
            ->where($qb->expr()->eq('g.isHidden', ':isHidden'))
            ->andWhere($qb->expr()->eq('g.driver', ':driver'))
            ->setParameter('isHidden', false)
            ->setParameter('driver', $driver)
        ;

        try {
            $result = $qb->getQuery()->getSingleResult();
            $difference = (float) $result['difference'];
        }
        catch (NoResultException $e) {}

        return $difference;
    }

    public function getMaxKilometersForDriver($driver)
    {
        $max = 0;

        $qb = $this->_em->createQueryBuilder();

        $qb->select('MAX(g.kilometers) maxDrivenKilometers')
            ->from('FsbAlfredCoreBundle:Gasoil', 'g')
            ->where($qb->expr()->eq('g.isHidden', ':isHidden'))
            ->andWhere($qb->expr()->eq('g.driver', ':driver'))
            ->setParameter('isHidden', false)
            ->setParameter('driver', $driver)
        ;

        try {
            $result = $qb->getQuery()->getSingleResult();
            $max = (float) $result['maxDrivenKilometers'];
        }
        catch (NoResultException $e) {}

        return $max;
    }

    public function getAverageLiterPriceForDriver($driver)
    {
        $average = 0;

        $qb = $this->_em->createQueryBuilder();

        $qb->select('AVG(g.price) average')
            ->from('FsbAlfredCoreBundle:Gasoil', 'g')
            ->where($qb->expr()->eq('g.isHidden', ':isHidden'))
            ->andWhere($qb->expr()->eq('g.driver', ':driver'))
            ->setParameter('isHidden', false)
            ->setParameter('driver', $driver)
        ;

        try {
            $result = $qb->getQuery()->getSingleResult();
            $average = (float) $result['average'];
        }
        catch (NoResultException $e) {}

        return $average;
    }
}
